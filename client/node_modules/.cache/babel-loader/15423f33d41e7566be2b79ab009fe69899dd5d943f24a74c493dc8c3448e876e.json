{"ast":null,"code":"import { getMapParams } from \"../maps/Level1\";\nclass Enemy {\n  constructor(context) {\n    let isMoving = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let animationFrameId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    let randomOffset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {\n      x: Math.floor(Math.random() * 8),\n      y: Math.floor(Math.random() * 8)\n    };\n    let currentPosition = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {\n      x: 0,\n      y: 0\n    };\n    let enemyParams = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {\n      width: 10,\n      height: 10\n    };\n    let mapParams = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : getMapParams();\n    this.context = context;\n    this.isMoving = isMoving;\n    this.animationFrameId = animationFrameId;\n    this.randomOffset = randomOffset;\n    this.currentPosition = currentPosition;\n    this.enemyParams = enemyParams;\n    this.mapParams = mapParams;\n  }\n  drawEnemy() {\n    // set initial coords of enemy\n    this.currentPosition.x = this.mapParams.startX + this.randomOffset.x;\n    this.currentPosition.y = this.mapParams.startY + this.randomOffset.y;\n\n    // draw a 2d representation\n    this.context.beginPath();\n    this.context.rect(this.currentPosition.x, this.currentPosition.y, this.enemyParams.width, this.enemyParams.height);\n    this.context.strokeStyle = 'red';\n    this.context.stroke();\n    this.context.closePath();\n  }\n  moveRight() {\n    this.animationFrameId = requestAnimationFrame(() => this.move());\n    // increment x, y is constant\n    this.currentPosition.x += 1;\n\n    // clear prev render\n    this.context.fillRect(this.currentPosition.x - 2, this.currentPosition.y - 1, this.enemyParams.width + 1, this.enemyParams.height + 2);\n\n    // and place a new figure on canvas\n    this.context.beginPath();\n    this.context.rect(this.currentPosition.x, this.currentPosition.y, this.enemyParams.width, this.enemyParams.height);\n    this.context.strokeStyle = 'red';\n    this.context.stroke();\n    this.context.closePath();\n  }\n  moveDown() {\n    this.animationFrameId = requestAnimationFrame(() => this.move());\n    // increment y, x is constant\n    this.currentPosition.y += 1;\n\n    // clear prev render\n    this.context.fillRect(this.currentPosition.x - 1, this.currentPosition.y - 2, this.enemyParams.width + 2, this.enemyParams.height + 2);\n\n    // and place a new figure on canvas\n    this.context.beginPath();\n    this.context.rect(this.currentPosition.x, this.currentPosition.y, this.enemyParams.width, this.enemyParams.height);\n    this.context.strokeStyle = 'red';\n    this.context.stroke();\n    this.context.closePath();\n  }\n  move() {\n    if (!this.isMoving) {}\n\n    // moving right and then\n    if (this.currentPosition.x <= this.mapParams.rightBorder + this.randomOffset.x) {\n      this.moveRight();\n    } else {\n      this.stop();\n      // move down and then\n      if (this.currentPosition.y <= this.mapParams.bottomBorder) {\n        this.moveDown();\n      } else {\n        this.stop();\n        if (this.currentPosition.x <= this.mapParams.width) {\n          this.moveRight();\n        } else {\n          this.stop();\n        }\n      }\n    }\n\n    // debug\n    console.log(`this.currentPosition.x`);\n    console.log(this.currentPosition.x);\n    console.log(`this.currentPosition.x > mapParams.rightBorder`);\n    console.log(this.currentPosition.x > this.mapParams.rightBorder);\n    //\n\n    /*\n    if(this.currentPosition.x <= mapParams.rightBorder) {\n        this.moveRight()\n    } else if (this.currentPosition.x == mapParams.rightBorder ) {\n        this.moveDown()\n    }\n     */\n\n    setTimeout(() => {\n      this.stop();\n    }, 15000);\n  }\n  stop() {\n    if (this.animationFrameId !== null) {\n      cancelAnimationFrame(this.animationFrameId);\n    }\n  }\n}\nexport default Enemy;","map":{"version":3,"names":["getMapParams","Enemy","constructor","context","isMoving","animationFrameId","randomOffset","x","Math","floor","random","y","currentPosition","enemyParams","width","height","mapParams","drawEnemy","startX","startY","beginPath","rect","strokeStyle","stroke","closePath","moveRight","requestAnimationFrame","move","fillRect","moveDown","rightBorder","stop","bottomBorder","console","log","setTimeout","cancelAnimationFrame"],"sources":["/data/towerDefence/client/src/enemies/Enemy.ts"],"sourcesContent":["import {getMapParams} from \"../maps/Level1\";\n\nclass Enemy {\n    constructor(\n        public context: CanvasRenderingContext2D,\n        public isMoving: boolean = false,\n        public animationFrameId: number | null = null,\n        public randomOffset = {\n            x: Math.floor(Math.random() * 8),\n            y: Math.floor(Math.random() * 8),\n        },\n        public currentPosition = {\n            x: 0,\n            y: 0,\n        },\n        public enemyParams = {\n            width: 10,\n            height: 10\n        },\n        public mapParams = getMapParams(),\n    ) {\n\n    }\n\n    public drawEnemy() {\n        // set initial coords of enemy\n        this.currentPosition.x = this.mapParams.startX + this.randomOffset.x\n        this.currentPosition.y = this.mapParams.startY + this.randomOffset.y\n\n        // draw a 2d representation\n        this.context.beginPath()\n        this.context.rect(this.currentPosition.x, this.currentPosition.y, this.enemyParams.width, this.enemyParams.height)\n        this.context.strokeStyle = 'red'\n        this.context.stroke()\n        this.context.closePath()\n    }\n\n    public moveRight() {\n        this.animationFrameId = requestAnimationFrame(() => this.move())\n        // increment x, y is constant\n        this.currentPosition.x += 1\n\n        // clear prev render\n        this.context.fillRect(this.currentPosition.x - 2, this.currentPosition.y - 1 , this.enemyParams.width + 1, this.enemyParams.height + 2)\n\n        // and place a new figure on canvas\n        this.context.beginPath()\n        this.context.rect(this.currentPosition.x, this.currentPosition.y, this.enemyParams.width, this.enemyParams.height)\n        this.context.strokeStyle = 'red'\n        this.context.stroke()\n        this.context.closePath()\n    }\n\n    public moveDown() {\n        this.animationFrameId = requestAnimationFrame(() => this.move())\n        // increment y, x is constant\n        this.currentPosition.y += 1\n\n        // clear prev render\n        this.context.fillRect(this.currentPosition.x - 1, this.currentPosition.y - 2 , this.enemyParams.width + 2, this.enemyParams.height + 2)\n\n        // and place a new figure on canvas\n        this.context.beginPath()\n        this.context.rect(this.currentPosition.x, this.currentPosition.y, this.enemyParams.width, this.enemyParams.height)\n        this.context.strokeStyle = 'red'\n        this.context.stroke()\n        this.context.closePath()\n    }\n\n    public move() {\n        if (!this.isMoving) {\n\n        }\n\n        // moving right and then\n        if (this.currentPosition.x <= this.mapParams.rightBorder + this.randomOffset.x) {\n            this.moveRight()\n        } else {\n            this.stop()\n            // move down and then\n            if (this.currentPosition.y <= this.mapParams.bottomBorder) {\n                this.moveDown()\n            } else {\n                this.stop()\n                if (this.currentPosition.x <= this.mapParams.width) {\n                    this.moveRight()\n                } else {\n                    this.stop()\n                }\n            }\n\n        }\n\n\n\n        // debug\n        console.log(`this.currentPosition.x`)\n        console.log(this.currentPosition.x)\n        console.log(`this.currentPosition.x > mapParams.rightBorder`)\n        console.log(this.currentPosition.x > this.mapParams.rightBorder)\n        //\n\n        /*\n        if(this.currentPosition.x <= mapParams.rightBorder) {\n            this.moveRight()\n        } else if (this.currentPosition.x == mapParams.rightBorder ) {\n            this.moveDown()\n        }\n         */\n\n\n        setTimeout(() => {\n            this.stop()\n        }, 15000)\n    }\n\n    public stop() {\n        if (this.animationFrameId !== null) {\n            cancelAnimationFrame(this.animationFrameId!)\n        }\n    }\n}\n\nexport default Enemy;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}