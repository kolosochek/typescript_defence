{"ast":null,"code":"import { mapParams } from \"../maps/Level1\";\nclass Enemy {\n  constructor(context) {\n    let isMoving = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let animationFrameId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    let randomOffset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {\n      x: Math.floor(Math.random() * 8),\n      y: Math.floor(Math.random() * 8)\n    };\n    let currentPosition = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {\n      x: 0,\n      y: 0\n    };\n    let enemyParams = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {\n      width: 10,\n      height: 10\n    };\n    this.context = context;\n    this.isMoving = isMoving;\n    this.animationFrameId = animationFrameId;\n    this.randomOffset = randomOffset;\n    this.currentPosition = currentPosition;\n    this.enemyParams = enemyParams;\n  }\n  drawEnemy() {\n    // set initial coords of enemy\n    this.currentPosition.x = mapParams.startX + this.randomOffset.x;\n    this.currentPosition.y = mapParams.startY + this.randomOffset.y;\n\n    // draw a 2d representation\n    this.context.beginPath();\n    this.context.rect(this.currentPosition.x, this.currentPosition.y, this.enemyParams.width, this.enemyParams.height);\n    this.context.strokeStyle = 'red';\n    this.context.stroke();\n    this.context.closePath();\n  }\n  moveRight() {\n    // increment x, y is constant\n    this.currentPosition.x += 1;\n\n    // clear prev render\n    this.context.fillRect(this.currentPosition.x - 1, this.currentPosition.y - 1, this.enemyParams.width + 1, this.enemyParams.height + 2);\n\n    // and place a new figure on canvas\n    this.context.beginPath();\n    this.context.rect(this.currentPosition.x, this.currentPosition.y, this.enemyParams.width, this.enemyParams.height);\n    this.context.strokeStyle = 'red';\n    this.context.stroke();\n    this.context.closePath();\n  }\n  move(timestamp) {\n    this.animationFrameId = requestAnimationFrame(timestamp => this.move(timestamp));\n    if (!this.isMoving) {\n      this.stop();\n    }\n    setTimeout(() => {\n      this.isMoving = false;\n    }, 10000);\n  }\n  stop() {\n    if (this.animationFrameId !== null) {\n      cancelAnimationFrame(this.animationFrameId);\n    }\n  }\n}\nexport default Enemy;","map":{"version":3,"names":["mapParams","Enemy","constructor","context","isMoving","animationFrameId","randomOffset","x","Math","floor","random","y","currentPosition","enemyParams","width","height","drawEnemy","startX","startY","beginPath","rect","strokeStyle","stroke","closePath","moveRight","fillRect","move","timestamp","requestAnimationFrame","stop","setTimeout","cancelAnimationFrame"],"sources":["/data/towerDefence/client/src/enemies/Enemy.ts"],"sourcesContent":["import {mapParams} from \"../maps/Level1\";\n\nclass Enemy {\n    constructor(\n        public context: CanvasRenderingContext2D,\n        public isMoving: boolean = false,\n        public animationFrameId: number | null = null,\n        public randomOffset = {\n            x: Math.floor(Math.random() * 8),\n            y: Math.floor(Math.random() * 8),\n        },\n        public currentPosition = {\n            x: 0,\n            y: 0,\n        },\n        public enemyParams = {\n            width: 10,\n            height: 10\n        },\n    ) {\n\n    }\n\n    public drawEnemy() {\n        // set initial coords of enemy\n        this.currentPosition.x = mapParams.startX + this.randomOffset.x\n        this.currentPosition.y = mapParams.startY + this.randomOffset.y\n\n        // draw a 2d representation\n        this.context.beginPath()\n        this.context.rect(this.currentPosition.x, this.currentPosition.y, this.enemyParams.width, this.enemyParams.height)\n        this.context.strokeStyle = 'red'\n        this.context.stroke()\n        this.context.closePath()\n    }\n\n    public moveRight() {\n        // increment x, y is constant\n        this.currentPosition.x += 1\n\n        // clear prev render\n        this.context.fillRect(this.currentPosition.x - 1, this.currentPosition.y - 1 , this.enemyParams.width + 1, this.enemyParams.height + 2)\n\n        // and place a new figure on canvas\n        this.context.beginPath()\n        this.context.rect(this.currentPosition.x, this.currentPosition.y, this.enemyParams.width, this.enemyParams.height)\n        this.context.strokeStyle = 'red'\n        this.context.stroke()\n        this.context.closePath()\n    }\n    public move(timestamp: DOMHighResTimeStamp) {\n        this.animationFrameId = requestAnimationFrame((timestamp) => this.move(timestamp))\n        if (!this.isMoving) {\n            this.stop()\n        }\n\n\n\n        setTimeout(() => {\n            this.isMoving = false\n        }, 10000)\n    }\n\n    public stop() {\n        if (this.animationFrameId !== null) {\n            cancelAnimationFrame(this.animationFrameId!)\n        }\n    }\n}\n\nexport default Enemy;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}