{"ast":null,"code":"import { mapParams } from \"../maps/Level1\";\nclass Enemy {\n  constructor(context) {\n    let randomOffset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      x: Math.floor(Math.random() * 8),\n      y: Math.floor(Math.random() * 8)\n    };\n    let currentPosition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n      x: 0,\n      y: 0\n    };\n    let enemyParams = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {\n      width: 10,\n      height: 10\n    };\n    this.context = context;\n    this.randomOffset = randomOffset;\n    this.currentPosition = currentPosition;\n    this.enemyParams = enemyParams;\n  }\n  drawEnemy() {\n    // set initial coords of enemy\n    this.currentPosition.x = mapParams.startX + this.randomOffset.x;\n    this.currentPosition.y = mapParams.startY + this.randomOffset.y;\n\n    // draw a 2d representation\n    this.context.beginPath();\n    this.context.rect(this.currentPosition.x, this.currentPosition.y, this.enemyParams.width, this.enemyParams.height);\n    this.context.strokeStyle = 'red';\n    this.context.stroke();\n    this.context.closePath();\n  }\n  move(timestamp) {\n    const afId = requestAnimationFrame(tick => this.move(timestamp));\n    // change me to proper tick\n    const tick = timestamp;\n\n    // debug\n    console.log(tick);\n    console.log(`tick`);\n    //\n\n    this.context.clearRect(this.currentPosition.x + tick, this.currentPosition.y, this.enemyParams.width, this.enemyParams.height);\n    this.context.beginPath();\n    this.context.rect(this.currentPosition.x + tick, this.currentPosition.y, this.enemyParams.width, this.enemyParams.height);\n    this.context.strokeStyle = 'red';\n    this.context.stroke();\n    this.context.closePath();\n  }\n}\nexport default Enemy;","map":{"version":3,"names":["mapParams","Enemy","constructor","context","randomOffset","x","Math","floor","random","y","currentPosition","enemyParams","width","height","drawEnemy","startX","startY","beginPath","rect","strokeStyle","stroke","closePath","move","timestamp","afId","requestAnimationFrame","tick","console","log","clearRect"],"sources":["/data/towerDefence/client/src/enemies/Enemy.ts"],"sourcesContent":["import {mapParams} from \"../maps/Level1\";\n\nclass Enemy {\n    constructor(\n        public context:CanvasRenderingContext2D,\n        public randomOffset = {\n            x: Math.floor(Math.random() * 8),\n            y: Math.floor(Math.random() * 8),\n        },\n        public currentPosition = {\n            x: 0,\n            y: 0,\n        },\n        public enemyParams = {\n            width: 10,\n            height: 10\n        },\n        ) {\n    }\n\n    public drawEnemy() {\n        // set initial coords of enemy\n        this.currentPosition.x = mapParams.startX + this.randomOffset.x\n        this.currentPosition.y = mapParams.startY + this.randomOffset.y\n\n        // draw a 2d representation\n        this.context.beginPath()\n        this.context.rect( this.currentPosition.x , this.currentPosition.y, this.enemyParams.width, this.enemyParams.height )\n        this.context.strokeStyle = 'red'\n        this.context.stroke()\n        this.context.closePath()\n    }\n\n    public move(timestamp:any) {\n        const afId = requestAnimationFrame((tick) => this.move(timestamp))\n        // change me to proper tick\n        const tick = timestamp\n        \n        \n        // debug\n        console.log(tick)\n        console.log(`tick`)\n        //\n        \n        this.context.clearRect(this.currentPosition.x + tick , this.currentPosition.y, this.enemyParams.width, this.enemyParams.height)\n        this.context.beginPath()\n        this.context.rect( this.currentPosition.x + tick , this.currentPosition.y, this.enemyParams.width, this.enemyParams.height )\n        this.context.strokeStyle = 'red'\n        this.context.stroke()\n        this.context.closePath()\n    }\n}\n\nexport default Enemy;"],"mappings":"AAAA,SAAQA,SAAS,QAAO,gBAAgB;AAExC,MAAMC,KAAK,CAAC;EACRC,WAAW,CACAC,OAAgC,EAarC;IAAA,IAZKC,YAAY,uEAAG;MAClBC,CAAC,EAAEC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG,CAAC,CAAC;MAChCC,CAAC,EAAEH,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG,CAAC;IACnC,CAAC;IAAA,IACME,eAAe,uEAAG;MACrBL,CAAC,EAAE,CAAC;MACJI,CAAC,EAAE;IACP,CAAC;IAAA,IACME,WAAW,uEAAG;MACjBC,KAAK,EAAE,EAAE;MACTC,MAAM,EAAE;IACZ,CAAC;IAAA,KAZMV,OAAgC,GAAhCA,OAAgC;IAAA,KAChCC,YAAY,GAAZA,YAAY;IAAA,KAIZM,eAAe,GAAfA,eAAe;IAAA,KAIfC,WAAW,GAAXA,WAAW;EAKtB;EAEOG,SAAS,GAAG;IACf;IACA,IAAI,CAACJ,eAAe,CAACL,CAAC,GAAGL,SAAS,CAACe,MAAM,GAAG,IAAI,CAACX,YAAY,CAACC,CAAC;IAC/D,IAAI,CAACK,eAAe,CAACD,CAAC,GAAGT,SAAS,CAACgB,MAAM,GAAG,IAAI,CAACZ,YAAY,CAACK,CAAC;;IAE/D;IACA,IAAI,CAACN,OAAO,CAACc,SAAS,EAAE;IACxB,IAAI,CAACd,OAAO,CAACe,IAAI,CAAE,IAAI,CAACR,eAAe,CAACL,CAAC,EAAG,IAAI,CAACK,eAAe,CAACD,CAAC,EAAE,IAAI,CAACE,WAAW,CAACC,KAAK,EAAE,IAAI,CAACD,WAAW,CAACE,MAAM,CAAE;IACrH,IAAI,CAACV,OAAO,CAACgB,WAAW,GAAG,KAAK;IAChC,IAAI,CAAChB,OAAO,CAACiB,MAAM,EAAE;IACrB,IAAI,CAACjB,OAAO,CAACkB,SAAS,EAAE;EAC5B;EAEOC,IAAI,CAACC,SAAa,EAAE;IACvB,MAAMC,IAAI,GAAGC,qBAAqB,CAAEC,IAAI,IAAK,IAAI,CAACJ,IAAI,CAACC,SAAS,CAAC,CAAC;IAClE;IACA,MAAMG,IAAI,GAAGH,SAAS;;IAGtB;IACAI,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;IACjBC,OAAO,CAACC,GAAG,CAAE,MAAK,CAAC;IACnB;;IAEA,IAAI,CAACzB,OAAO,CAAC0B,SAAS,CAAC,IAAI,CAACnB,eAAe,CAACL,CAAC,GAAGqB,IAAI,EAAG,IAAI,CAAChB,eAAe,CAACD,CAAC,EAAE,IAAI,CAACE,WAAW,CAACC,KAAK,EAAE,IAAI,CAACD,WAAW,CAACE,MAAM,CAAC;IAC/H,IAAI,CAACV,OAAO,CAACc,SAAS,EAAE;IACxB,IAAI,CAACd,OAAO,CAACe,IAAI,CAAE,IAAI,CAACR,eAAe,CAACL,CAAC,GAAGqB,IAAI,EAAG,IAAI,CAAChB,eAAe,CAACD,CAAC,EAAE,IAAI,CAACE,WAAW,CAACC,KAAK,EAAE,IAAI,CAACD,WAAW,CAACE,MAAM,CAAE;IAC5H,IAAI,CAACV,OAAO,CAACgB,WAAW,GAAG,KAAK;IAChC,IAAI,CAAChB,OAAO,CAACiB,MAAM,EAAE;IACrB,IAAI,CAACjB,OAAO,CAACkB,SAAS,EAAE;EAC5B;AACJ;AAEA,eAAepB,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}